// Simplified version without BullMQ/Redis for testing
import { EventEmitter } from 'events';
import { randomUUID } from 'crypto';
import { v4 as uuidv4 } from 'uuid';

// Simulated in-memory job storage
// Use global variables to ensure the same storage is used across imports
// @ts-ignore
global.heicConverterJobs = global.heicConverterJobs || new Map<string, any>();
// @ts-ignore
global.heicConverterSubscribers = global.heicConverterSubscribers || new Map<string, Set<(data: any) => void>>();
// @ts-ignore
global.heicConverterEvents = global.heicConverterEvents || new EventEmitter();

// References to the global storage
const jobs = global.heicConverterJobs;
const subscribers = global.heicConverterSubscribers;
const jobEvents = global.heicConverterEvents;

// For debugging
console.log('Queue manager initialized. Current jobs:', jobs.size);

// Job types
export interface ConversionJob {
  jobId: string;
  userId: string;
  files: any[];
  outputFormat: string;
  quality: number;
  pdfOptions: any;
  priority: number;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  progress: number;
  error?: string;
  createdAt: Date;
  completedAt?: Date;
}

// Add a new conversion job
export async function addJob(jobData: any): Promise<string> {
  const jobId = jobData.jobId || uuidv4();
  const job: ConversionJob = {
    jobId,
    ...jobData,
    status: 'pending',
    progress: 0,
    createdAt: new Date()
  };
  
  // Store job in memory
  jobs.set(jobId, job);
  console.log(`Queue manager - Added job ${jobId}. Total jobs:`, jobs.size);
  
  // For testing purposes, immediately process the job
  setTimeout(() => processJob(jobId), 500);
  
  return jobId;
}

// Process a job (simulated)
async function processJob(jobId: string): Promise<void> {
  console.log(`Starting job processing for job ID: ${jobId}`);
  const job = jobs.get(jobId);
  if (!job) {
    console.log(`Job ${jobId} not found`);
    return;
  }
  
  // Update job status to processing
  job.status = 'processing';
  job.progress = 0;
  notifyJobUpdate(job);
  
  // Clear module cache to ensure we get the latest version
  Object.keys(require.cache).forEach(key => {
    if (key.includes('heic-converter')) {
      delete require.cache[key];
    }
  });
  
  // Import the real HEIC converter
  const { processHeicConversion } = require('../conversion/heic-converter');
  const fs = require('fs').promises;
  const path = require('path');
  const fsSync = require('fs');
  
  try {
    console.log(`Processing job ${jobId} with ${job.files.length} files`);
    // Prepare the files array in the format expected by the converter
    const files = [];
    
    // Check if these are mock files or real upload files
    if (job.files[0].path) {
      // Real uploaded files
      files.push(...job.files);
    } else {
      // These are mock files, so we need to create some test HEIC files
      console.log('Creating mock HEIC files for testing');
      
      // Create a temporary directory for mock files
      const tempDir = path.join(__dirname, '../../uploads/temp');
      
      // Check if we have any sample HEIC files
      const sampleHeicDir = path.join(__dirname, '../../sample-heic');
      let heicFiles = [];
      
      if (fsSync.existsSync(sampleHeicDir)) {
        heicFiles = fsSync.readdirSync(sampleHeicDir)
          .filter(f => f.toLowerCase().endsWith('.heic'))
          .map(f => path.join(sampleHeicDir, f));
      }
      
      if (heicFiles.length > 0) {
        // Use sample HEIC files
        for (let i = 0; i < job.files.length; i++) {
          const mockFilePath = path.join(tempDir, `mock-${job.jobId}-${i}.heic`);
          const heicContent = await fs.readFile(heicFiles[i % heicFiles.length]);
          await fs.writeFile(mockFilePath, heicContent);
          
          files.push({
            path: mockFilePath,
            name: job.files[i].originalName || `test-${i}.heic`,
            size: heicContent.length,
            type: 'image/heic'
          });
        }
      } else {
        // No sample HEIC files, create default test files
        const gradientImageData = generateGradientJpeg();
        
        for (let i = 0; i < job.files.length; i++) {
          const mockFilePath = path.join(tempDir, `mock-${job.jobId}-${i}.jpg`);
          await fs.writeFile(mockFilePath, gradientImageData);
          
          files.push({
            path: mockFilePath,
            name: job.files[i].originalName || `test-${i}.heic`,
            size: gradientImageData.length,
            type: 'image/jpeg'
          });
        }
      }
    }
    
    // Use the actual converter to process the HEIC files
    const convertedFiles = await processHeicConversion(
      files,
      job.outputFormat || 'jpg',
      job.quality || 80,
      job.pdfOptions || { pageSize: 'a4', orientation: 'portrait' },
      async (progress) => {
        // Update job progress during conversion
        job.progress = progress.percentage || Math.round((progress.fileIndex / progress.totalFiles) * 100);
        console.log(`Job ${job.jobId} progress: ${job.progress}%`);
        notifyJobUpdate(job);
      }
    );
    
    // Update job with results
    for (let i = 0; i < convertedFiles.files.length; i++) {
      const convertedFile = convertedFiles.files[i];
      const originalFile = job.files[i];
      
      // Map the converted file info back to the job
      originalFile.convertedName = convertedFile.convertedName;
      originalFile.convertedPath = convertedFile.url.replace(/^.*\/api\/files\//, '');
      originalFile.size = convertedFile.size;
      originalFile.status = 'completed';
    }
    
    // Add ZIP file info if available
    if (convertedFiles.zipUrl) {
      job.zipUrl = convertedFiles.zipUrl;
    }
    
  } catch (error) {
    console.error('Error processing HEIC conversion:', error);
    
    // Fallback to generating mock files if conversion fails
    console.log(`Using fallback for job ${jobId}`);
    // Process each file using the mock method
    const totalSteps = job.files.length;
    let currentStep = 0;
    
    for (let i = 0; i < job.files.length; i++) {
      // Update progress
      currentStep++;
      job.progress = Math.round((currentStep / totalSteps) * 100);
      notifyJobUpdate(job);
      
      // Get file details
      const fileObj = job.files[i];
      const originalName = fileObj.name || fileObj.originalName;
      const fileBaseName = originalName.replace(/\.[^/.]+$/, '');
      const convertedName = `${fileBaseName}.${job.outputFormat}`;
      const filePath = `temp/${job.jobId}-${i}-${convertedName}`;
      
      // Create a mock converted file as fallback
      try {
        const fullPath = path.join(__dirname, '../../uploads', filePath);
        await fs.mkdir(path.dirname(fullPath), { recursive: true });
        
        // Generate a gradient image as a fallback
        const gradientImageData = generateGradientJpeg();
        await fs.writeFile(fullPath, gradientImageData);
        console.log(`Created fallback image at ${fullPath}`);
        
        // Update file information
        fileObj.convertedName = convertedName;
        fileObj.convertedPath = filePath;
        fileObj.size = gradientImageData.length;
        fileObj.status = 'completed';
      } catch (err) {
        console.error('Error creating fallback image file:', err);
        fileObj.status = 'failed';
        fileObj.error = err.message;
      }
    }
  } finally {
    // Mark job as completed regardless of success or failure
    console.log(`Finalizing job ${jobId}`);
    job.status = 'completed';
    job.progress = 100;
    job.completedAt = new Date();
    notifyJobUpdate(job);
    
    jobEvents.emit(`job.completed.${jobId}`, {
      jobId, 
      status: 'completed',
      progress: 100,
      files: job.files
    });
    
    console.log(`Job ${jobId} completed with files:`, job.files);
  }
}

// Utility function to generate a simple gradient JPEG
function generateGradientJpeg() {
  // This is a simple blue gradient JPEG for testing
  // In a real application, this would be replaced with actual conversion results
  const jpegData = Buffer.from([
    0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48, 
    0x00, 0x48, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 
    0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0a, 0x0c, 0x14, 0x0d, 0x0c, 0x0b, 0x0b, 0x0c, 0x19, 0x12, 
    0x13, 0x0f, 0x14, 0x1d, 0x1a, 0x1f, 0x1e, 0x1d, 0x1a, 0x1c, 0x1c, 0x20, 0x24, 0x2e, 0x27, 0x20, 
    0x22, 0x2c, 0x23, 0x1c, 0x1c, 0x28, 0x37, 0x29, 0x2c, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1f, 0x27, 
    0x39, 0x3d, 0x38, 0x32, 0x3c, 0x2e, 0x33, 0x34, 0x32, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x09, 0x09, 
    0x09, 0x0c, 0x0b, 0x0c, 0x18, 0x0d, 0x0d, 0x18, 0x32, 0x21, 0x1c, 0x21, 0x32, 0x32, 0x32, 0x32, 
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0xff, 0xc0, 
    0x00, 0x11, 0x08, 0x00, 0x64, 0x00, 0x64, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 
    0x01, 0xff, 0xc4, 0x00, 0x1f, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 
    0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 
    0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7d, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 
    0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 
    0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 
    0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 
    0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 
    0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 
    0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 
    0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 
    0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 
    0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 
    0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xc4, 0x00, 0x1f, 0x01, 0x00, 0x03, 
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
    0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x11, 0x00, 
    0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77, 0x00, 
    0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 
    0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 
    0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 
    0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 
    0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 
    0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 
    0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 
    0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 
    0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 
    0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 
    0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xe3, 
    0xf4, 0xef, 0x0a, 0xea, 0xda, 0xbd, 0xd8, 0xb7, 0xd3, 0xec, 0xee, 0x2e, 0xa5, 0x27, 0x00, 0x46, 
    0x85, 0xbf, 0x5e, 0x95, 0xdf, 0x5a, 0xfc, 0x01, 0xf1, 0x9d, 0xe5, 0xa7, 0x9f, 0x6f, 0xe1, 0x1d, 
    0x52, 0x48, 0xb2, 0x54, 0x91, 0x01, 0x20, 0x91, 0x82, 0x38, 0xef, 0x56, 0x3e, 0x02, 0xdd, 0x47, 
    0x17, 0x8d, 0x67, 0x49, 0x18, 0x57, 0x68, 0x18, 0x2a, 0x9e, 0x4e, 0x09, 0x15, 0xeb, 0x51, 0xf8, 
    0x36, 0xf6, 0x3f, 0x16, 0x37, 0x88, 0x24, 0xd4, 0x6d, 0x64, 0x21, 0x98, 0xbc, 0x2b, 0x0e, 0x63, 
    0x8c, 0x8c, 0x67, 0x9e, 0xbc, 0x0c, 0x77, 0xaf, 0x13, 0x19, 0x89, 0xad, 0x09, 0x20, 0xff, 0x00, 
    0xd0, 0x19, 0x7b, 0xfe, 0x78, 0xff, 0x00, 0x33, 0x48, 0xeb, 0xf8, 0x64, 0xed, 0xfd, 0xff, 0x00, 
    0x89, 0xb8, 0xa5, 0xef, 0xfc, 0xf3, 0xfd, 0x69, 0x75, 0xa0, 0xff, 0x00, 0xd6, 0x38, 0xc9, 0xa5, 
    0xc1, 0xfe, 0xad, 0xbe, 0xa2, 0xad, 0x8c, 0x41, 0xaf, 0x65, 0xcc, 0x55, 0xed, 0xc3, 0xf8, 0x4f, 
    0x2d, 0xe4, 0xf7, 0x16, 0xde, 0x74, 0x52, 0x3a, 0x3a, 0x30, 0xc1, 0x56, 0x52, 0x08, 0x23, 0xdc, 
    0x11, 0x54, 0xdc, 0x9c, 0xf3, 0xd6, 0xbd, 0x13, 0xe2, 0xc6, 0x9e, 0x90, 0xf8, 0xaa, 0x4b, 0x81, 
    0x18, 0x57, 0xbc, 0x45, 0x95, 0x82, 0x8c, 0x06, 0x23, 0x82, 0x7d, 0xc9, 0x15, 0xe7, 0xc3, 0x9f, 
    0xf3, 0x8a, 0xf6, 0x28, 0xd4, 0xe7, 0x82, 0x67, 0xea, 0x7c, 0x37, 0x9a, 0x2c, 0xc3, 0x29, 0xa5, 
    0x57, 0xbd, 0xad, 0xf2, 0x7a, 0x7e, 0x3b, 0x88, 0x4d, 0x01, 0x34, 0xa2, 0x90, 0xd6, 0xa7, 0xb0, 
    0x7f, 0xff, 0xd9
  ]);
  return jpegData;
}

// Get job status
export function getJobStatus(jobId: string) {
  if (!jobId) {
    console.log('No job ID provided to getJobStatus');
    return null;
  }
  console.log(`Queue manager - Fetching job ${jobId}. Available jobs:`, Array.from(jobs.keys()));
  return jobs.get(jobId) || null;
}

// Subscribe to job progress updates
export function subscribeToJobProgress(jobId: string, callback: (data: any) => void): () => void {
  if (!subscribers.has(jobId)) {
    subscribers.set(jobId, new Set());
  }
  
  const jobSubscribers = subscribers.get(jobId)!;
  jobSubscribers.add(callback);
  
  // Return unsubscribe function
  return () => {
    const subs = subscribers.get(jobId);
    if (subs) {
      subs.delete(callback);
      if (subs.size === 0) {
        subscribers.delete(jobId);
      }
    }
  };
}

// Notify subscribers of job updates
function notifyJobUpdate(job: any): void {
  const subs = subscribers.get(job.jobId);
  if (subs) {
    subs.forEach(callback => {
      try {
        callback(job);
      } catch (error) {
        console.error('Error in job update callback:', error);
      }
    });
  }
  
  jobEvents.emit(`job.progress.${job.jobId}`, { jobId: job.jobId, progress: job.progress });
}

// Get queue statistics (mock implementation)
export async function getQueueStats() {
  return {
    waiting: jobs.size,
    active: Array.from(jobs.values()).filter(job => (job as ConversionJob).status === 'processing').length,
    completed: Array.from(jobs.values()).filter(job => (job as ConversionJob).status === 'completed').length,
    failed: Array.from(jobs.values()).filter(job => (job as ConversionJob).status === 'failed').length
  };
}

// Clean up resources
export async function closeQueue() {
  // No actual connections to close in this simplified version
  return Promise.resolve();
}

// Get waiting jobs count
export async function getWaitingJobsCount() {
  return (await getQueueStats()).waiting;
}

// Get active jobs count
export async function getActiveJobsCount() {
  return (await getQueueStats()).active;
}

export async function getCompletedJobsCount() {
  return (await getQueueStats()).completed;
}

// Get failed jobs count
export async function getFailedJobsCount() {
  return (await getQueueStats()).failed;
}
